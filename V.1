import math
import xlrd
import timeit
loc = ('C:/Users/S529725/Desktop/TheData.xlsx')
wb = xlrd.open_workbook(loc)
sheet = wb.sheet_by_index(0)
from math import sqrt
margin = 8.625
start = timeit.default_timer()

def dist(t,a,b):
    x = t[0]
    y = t[1]
    c = (x-a)**2
    d = (y-b)**2
    fin = math.sqrt(c+d)
    return fin

def findRadius(x1, y1, x2, y2, x3, y3) :
    x12 = x1 - x2;
    x13 = x1 - x3;
    #print(x12, x13)

    y12 = y1 - y2;
    y13 = y1 - y3;
    #print(y12, y13)

    y31 = y3 - y1;
    y21 = y2 - y1;
    #print(y31, y21)

    x31 = x3 - x1;
    x21 = x2 - x1;
    #print(x31, x21)

    #print(y31*x12, y21*x13)
    # x1^2 - x3^2
    sx13 = pow(x1, 2) - pow(x3, 2);

    # y1^2 - y3^2
    sy13 = pow(y1, 2) - pow(y3, 2);

    sx21 = pow(x2, 2) - pow(x1, 2);
    sy21 = pow(y2, 2) - pow(y1, 2);
    if (2 * ((y31) * (x12)) - ((y21) * (x13))) == 0:
        return 0
    if (2 * ((x31) * (y12) - (x21) * (y13))) == 0:
        return 0
    f = (((sx13) * (x12) + (sy13) *
          (x12) + (sx21) * (x13) +
          (sy21) * (x13)) // (2 *
          ((y31) * (x12)) - ((y21) * (x13))));
    #print((2 * ((x31) * (y12) - (x21) * (y13))))
    g = (((sx13) * (y12) + (sy13) * (y12) +
          (sx21) * (y13) + (sy21) * (y13)) //
          (2 * ((x31) * (y12) - (x21) * (y13))));

    c = (-pow(x1, 2) - pow(y1, 2) -
         2 * g * x1 - 2 * f * y1);

    # eqn of circle be x^2 + y^2 + 2*g*x + 2*f*y + c = 0
    # where centre is (h = -g, k = -f) and
    # radius r as r^2 = h^2 + k^2 - c
    h = -g;
    k = -f;
    sqr_of_r = h * h + k * k - c;
    #print(sqrt(sqr_of_r))
    # r is the radius
    r = round(sqrt(sqr_of_r), 5);
    #print("Centre = (", h, ", ", k, ")");
    #print("Radius = ", r);
    return r

# Python3 implementation of the approach


def findCircle(x1, y1, x2, y2, x3, y3):
    x12 = x1 - x2;
    x13 = x1 - x3;

    y12 = y1 - y2;
    y13 = y1 - y3;

    y31 = y3 - y1;
    y21 = y2 - y1;

    x31 = x3 - x1;
    x21 = x2 - x1;

    # x1^2 - x3^2
    sx13 = pow(x1, 2) - pow(x3, 2);

    # y1^2 - y3^2
    sy13 = pow(y1, 2) - pow(y3, 2);

    sx21 = pow(x2, 2) - pow(x1, 2);
    sy21 = pow(y2, 2) - pow(y1, 2);
    if (2 * ((y31) * (x12)) - ((y21) * (x13))) == 0:
        return 0
    if (2 * ((x31) * (y12) - (x21) * (y13))) == 0:
        return 0
    f = (((sx13) * (x12) + (sy13) *
          (x12) + (sx21) * (x13) +
          (sy21) * (x13)) // (2 *
          ((y31) * (x12) - (y21) * (x13))));

    g = (((sx13) * (y12) + (sy13) * (y12) +
          (sx21) * (y13) + (sy21) * (y13)) //
          (2 * ((x31) * (y12) - (x21) * (y13))));

    c = (-pow(x1, 2) - pow(y1, 2) -
         2 * g * x1 - 2 * f * y1);

    # eqn of circle be x^2 + y^2 + 2*g*x + 2*f*y + c = 0
    # where centre is (h = -g, k = -f) and
    # radius r as r^2 = h^2 + k^2 - c
    h = -g;
    k = -f;
    sqr_of_r = h * h + k * k - c;

    # r is the radius
    r = round(sqrt(sqr_of_r), 5);
    d = r*2
    Center = (h,k)
    Radius = r
    Diameter = d
    return Center, Radius, Diameter
    #print("Centre = (", h, ", ", k, ")");
    #print("Radius = ", r);
    #print("Diameter = ", d)

def findRadius2(x1, y1, x2, y2, x3, y3):
    x12 = x1 - x2;
    x13 = x1 - x3;

    y12 = y1 - y2;
    y13 = y1 - y3;

    y31 = y3 - y1;
    y21 = y2 - y1;

    x31 = x3 - x1;
    x21 = x2 - x1;

    # x1^2 - x3^2
    sx13 = pow(x1, 2) - pow(x3, 2);

    # y1^2 - y3^2
    sy13 = pow(y1, 2) - pow(y3, 2);

    sx21 = pow(x2, 2) - pow(x1, 2);
    sy21 = pow(y2, 2) - pow(y1, 2);
    if (2 * ((y31) * (x12)) - ((y21) * (x13))) == 0:
        return 0
    if (2 * ((x31) * (y12) - (x21) * (y13))) == 0:
        return 0
    f = (((sx13) * (x12) + (sy13) *
          (x12) + (sx21) * (x13) +
          (sy21) * (x13)) // (2 *
          ((y31) * (x12) - (y21) * (x13))));

    g = (((sx13) * (y12) + (sy13) * (y12) +
          (sx21) * (y13) + (sy21) * (y13)) //
          (2 * ((x31) * (y12) - (x21) * (y13))));

    c = (-pow(x1, 2) - pow(y1, 2) -
         2 * g * x1 - 2 * f * y1);

    # eqn of circle be x^2 + y^2 + 2*g*x + 2*f*y + c = 0
    # where centre is (h = -g, k = -f) and
    # radius r as r^2 = h^2 + k^2 - c
    h = -g;
    k = -f;
    sqr_of_r = h * h + k * k - c;

    # r is the radius
    r = round(sqrt(sqr_of_r), 5);
    d = r*2
    Center = (h,k)
    Radius = r
    Diameter = d
    return r
    #print("Centre = (", h, ", ", k, ")");
    #print("Radius = ", r);
    #print("Diameter = ", d)

circle = []
lines = []
x = []
y= []
poi = 5
countList =[]
#Cut 1, etc
while poi < 14473:
    cell = sheet.cell_value(poi,3)
    if cell == "<null>":
        counter = len(x)
        countList.append(counter)
        print("Continue", counter)
        poi += 1
    else:
        comma = cell.index(",")
        #print(comma)
        #print(cell)
        xVal = cell[1:comma]
        #print(cell[1:comma])
        pointLen = len(cell)
        yVal = cell[comma + 2:pointLen - 4]
        #print(yVal)
        xVal = float(xVal)
        yVal = float(yVal)
        x.append(xVal)
        y.append(yVal)
        poi += 1
print("done")
#print(countList)
cut = 1
l = 0
m = 1
n = 2
#print(x)
#print(y)
#Need something to do the subtraction between
for ll in countList:
    m = l + 1
    n = l + 2
    #p = len(x)
    p = ll
    CenterSmall = []
    CenterLarge = []

    print("Cut Number ", cut)
    while l < p:
        while m < (p-1):
            while n < (p-2):
                #print(x[l], y[l],x[m], y[m],x[n], y[n])
                if x[l] == x[m]:
                    if y[l] == y[m]:
                        break
                if x[n] == x[m]:
                   if y[n] == y[m]:
                       break
                if x[l] == x[n]:
                    if y[l] == y[n]:
                        break
                #print(x[l], y[l], x[m], y[m], x[n], y[n])
                radi = findRadius2(x[l], y[l], x[m], y[m], x[n], y[n])
                #print(radi)
                diam = radi * 2
                #print(diam)
                Circ = findCircle(x[l], y[l], x[m], y[m], x[n], y[n])
                #print("This is a test", Circ)
                if diam >= (8.625 - margin):
                    print("pass")
                    print(diam)
                    if diam >= (8.625+margin):
                        if diam <= (16 + margin):
                            if diam >= (16 - margin):
                                #pre = len(Circ)
                                #CenterLarge.append(Circ[0])
                                #Circ = tuple(dict.fromkeys(Circ))
                                #if len(Circ) == pre:
                                #    n+=1
                                #    break
                                print(findCircle(x[l], y[l], x[m], y[m], x[n], y[n]))
                                #print(x[l], y[l], x[m], y[m], x[n], y[n])
                                print("")
                    else:
                        #pre = len(Circ)
                        #CenterSmall.append(Circ[0])
                        #Circ = tuple(dict.fromkeys(Circ))
                        #if len(Circ) == pre:
                        #    n+1
                        #    break
                        print(findCircle(x[l], y[l], x[m], y[m], x[n], y[n]))
                        #print(x[l], y[l], x[m], y[m], x[n], y[n])
                        print("")
                n += 1
            m += 1
        l += 1
    l = p
    cut += 1

stop = timeit.default_timer()
print(stop - start)
